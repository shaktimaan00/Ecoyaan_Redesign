{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8773841,"sourceType":"datasetVersion","datasetId":5273011}],"dockerImageVersionId":30732,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nprint(\"setup complete\")\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-24T12:19:44.196678Z","iopub.execute_input":"2024-06-24T12:19:44.197884Z","iopub.status.idle":"2024-06-24T12:19:44.212551Z","shell.execute_reply.started":"2024-06-24T12:19:44.197839Z","shell.execute_reply":"2024-06-24T12:19:44.210682Z"},"trusted":true},"execution_count":44,"outputs":[{"name":"stdout","text":"/kaggle/input/yoochoose-buys-dataset/yoochoose-buys.dat\nsetup complete\n","output_type":"stream"}]},{"cell_type":"code","source":"data = pd.read_csv('/kaggle/input/yoochoose-buys-dataset/yoochoose-buys.dat', sep=',', header=None, names=['session_id', 'timestamp', 'item_id', 'price', 'quantity'])\nprint(\"done reading file\")","metadata":{"execution":{"iopub.status.busy":"2024-06-24T12:20:41.998500Z","iopub.execute_input":"2024-06-24T12:20:41.998898Z","iopub.status.idle":"2024-06-24T12:20:43.874445Z","shell.execute_reply.started":"2024-06-24T12:20:41.998868Z","shell.execute_reply":"2024-06-24T12:20:43.873069Z"},"trusted":true},"execution_count":47,"outputs":[{"name":"stdout","text":"done reading file\n","output_type":"stream"}]},{"cell_type":"code","source":"#report 1: itemId vs purchase_event_counts\n\npurchase_event_counts = data['item_id'].value_counts().reset_index()\npurchase_event_counts.columns = ['item_id', 'purchase_event_count']\npurchase_event_counts.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-24T12:20:52.009296Z","iopub.execute_input":"2024-06-24T12:20:52.009812Z","iopub.status.idle":"2024-06-24T12:20:52.039849Z","shell.execute_reply.started":"2024-06-24T12:20:52.009780Z","shell.execute_reply":"2024-06-24T12:20:52.038553Z"},"trusted":true},"execution_count":49,"outputs":[{"execution_count":49,"output_type":"execute_result","data":{"text/plain":"     item_id  purchase_event_count\n0  643078800                 15203\n1  214829878                  8081\n2  214853420                  5356\n3  214829887                  4788\n4  214853102                  4050","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>item_id</th>\n      <th>purchase_event_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>643078800</td>\n      <td>15203</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>214829878</td>\n      <td>8081</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>214853420</td>\n      <td>5356</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>214829887</td>\n      <td>4788</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>214853102</td>\n      <td>4050</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# itemId vs distinct_session_counts\n\ndistinct_session_counts = data.groupby('item_id')['session_id'].nunique().reset_index()\ndistinct_session_counts.columns = ['item_id', 'distinct_session_count']\ndistinct_session_counts.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-24T12:20:57.465802Z","iopub.execute_input":"2024-06-24T12:20:57.466209Z","iopub.status.idle":"2024-06-24T12:20:57.647814Z","shell.execute_reply.started":"2024-06-24T12:20:57.466179Z","shell.execute_reply":"2024-06-24T12:20:57.646283Z"},"trusted":true},"execution_count":50,"outputs":[{"execution_count":50,"output_type":"execute_result","data":{"text/plain":"     item_id  distinct_session_count\n0  214507331                     233\n1  214507365                      69\n2  214507385                      67\n3  214507387                      44\n4  214507408                      48","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>item_id</th>\n      <th>distinct_session_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>214507331</td>\n      <td>233</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>214507365</td>\n      <td>69</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>214507385</td>\n      <td>67</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>214507387</td>\n      <td>44</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>214507408</td>\n      <td>48</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Calculate total quantity per item per session\ntotal_quantity_per_item_session = data.groupby(['item_id', 'session_id'])['quantity'].sum().reset_index()\n\n# Calculate average quantity per session per item\navg_quantity_per_session = total_quantity_per_item_session.groupby('item_id')['quantity'].mean().reset_index()\navg_quantity_per_session.columns = ['item_id', 'avg_quantity_per_session']\n\n# Display the first few rows\navg_quantity_per_session.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-24T12:25:38.103198Z","iopub.execute_input":"2024-06-24T12:25:38.103672Z","iopub.status.idle":"2024-06-24T12:25:38.612379Z","shell.execute_reply.started":"2024-06-24T12:25:38.103639Z","shell.execute_reply":"2024-06-24T12:25:38.611044Z"},"trusted":true},"execution_count":52,"outputs":[{"execution_count":52,"output_type":"execute_result","data":{"text/plain":"     item_id  avg_quantity_per_session\n0  214507331                  0.566524\n1  214507365                  1.376812\n2  214507385                  4.134328\n3  214507387                  8.409091\n4  214507408                  2.041667","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>item_id</th>\n      <th>avg_quantity_per_session</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>214507331</td>\n      <td>0.566524</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>214507365</td>\n      <td>1.376812</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>214507385</td>\n      <td>4.134328</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>214507387</td>\n      <td>8.409091</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>214507408</td>\n      <td>2.041667</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Merge all the reports into one DataFrame\ncombined_report = purchase_event_counts.merge(distinct_session_counts, on='item_id').merge(avg_quantity_per_session, on='item_id')\n\n# Display the first few rows\ncombined_report.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-24T12:26:01.215193Z","iopub.execute_input":"2024-06-24T12:26:01.215682Z","iopub.status.idle":"2024-06-24T12:26:01.255382Z","shell.execute_reply.started":"2024-06-24T12:26:01.215646Z","shell.execute_reply":"2024-06-24T12:26:01.253852Z"},"trusted":true},"execution_count":53,"outputs":[{"execution_count":53,"output_type":"execute_result","data":{"text/plain":"     item_id  purchase_event_count  distinct_session_count  \\\n0  643078800                 15203                   12440   \n1  214829878                  8081                    7240   \n2  214853420                  5356                    4750   \n3  214829887                  4788                    4247   \n4  214853102                  4050                    3548   \n\n   avg_quantity_per_session  \n0                  0.000000  \n1                  0.106077  \n2                  2.152842  \n3                  0.064045  \n4                  2.115840  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>item_id</th>\n      <th>purchase_event_count</th>\n      <th>distinct_session_count</th>\n      <th>avg_quantity_per_session</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>643078800</td>\n      <td>15203</td>\n      <td>12440</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>214829878</td>\n      <td>8081</td>\n      <td>7240</td>\n      <td>0.106077</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>214853420</td>\n      <td>5356</td>\n      <td>4750</td>\n      <td>2.152842</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>214829887</td>\n      <td>4788</td>\n      <td>4247</td>\n      <td>0.064045</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>214853102</td>\n      <td>4050</td>\n      <td>3548</td>\n      <td>2.115840</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"combined_report.to_csv('item_purchase_report.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-06-24T12:26:49.830108Z","iopub.execute_input":"2024-06-24T12:26:49.831566Z","iopub.status.idle":"2024-06-24T12:26:49.917009Z","shell.execute_reply.started":"2024-06-24T12:26:49.831514Z","shell.execute_reply":"2024-06-24T12:26:49.915465Z"},"trusted":true},"execution_count":54,"outputs":[]}]}